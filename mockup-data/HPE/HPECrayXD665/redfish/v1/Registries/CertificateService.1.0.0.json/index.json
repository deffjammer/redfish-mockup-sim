{
    "@odata.type": "#MessageRegistry.v1_3_1.MessageRegistry",
    "Description": "This registry defines the certificate service messages for Redfish",
    "Id": "CertificateService.1.0.0",
    "Language": "en",
    "Messages": {
        "CertificateActionRequiredDataMissing": {
            "Description": "Indicates that the certificate action request lacks of required data.",
            "Message": "The certificate action %1 required %2 in database, but it is missing.",
            "NumberOfArgs": 2,
            "ParamTypes": [
                "string",
                "string"
            ],
            "Resolution": "Please update the missing data and try again.",
            "Severity": "Critical"
        },
        "CertificateFileExpired": {
            "Description": "Indicates that the certificate file expired.",
            "Message": "The certificate file expired.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate is correct for SSL server usage and it should not expire or be encrypted.",
            "Severity": "Critical"
        },
        "CertificateFileSizeExceeded": {
            "Description": "Indicates that the size of the certificate file exceeded the maximum allowable size.",
            "Message": "The size of certificate file has exceeded the maximum allowable size %1 bytes.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Reduce the size of the certificate file or increase the size of default allowable size and resubmit the request.",
            "Severity": "Critical"
        },
        "CertificateFileUntrusted": {
            "Description": "Indicates that the certificate file is untrusted.",
            "Message": "The certificate file is untrusted, it can not used for the server certificate.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate is correct for SSL server usage and it should not expire or be encrypted.",
            "Severity": "Critical"
        },
        "CertificateKeyLengthNotAllowed": {
            "Description": "Indicates that the certificate file key length is not allowed.",
            "Message": "The certificate file key length is not equal to %1 bit.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Please make sure the certificate file key length is allowed",
            "Severity": "Critical"
        },
        "CertificateKeyLengthOverLimited": {
            "Description": "Indicates that certificate key length over limited.",
            "Message": "Certificate key length %1 is out of limited %2",
            "NumberOfArgs": 2,
            "ParamTypes": [
                "string",
                "string"
            ],
            "Resolution": "Please make sure the certificate key length meets the limit.",
            "Severity": "Critical"
        },
        "CertificateKeyLengthTooSmall": {
            "Description": "Indicates that the key length of the certificate file is less than minimum allowable size.",
            "Message": "The key length of the certificate file is less than minimum allowable size %1 bit.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Increase the key length of the certificate file or reduce the key length of default allowable size and resubmit the request.",
            "Severity": "Critical"
        },
        "CertificateTypeNotSupportedforUri": {
            "Description": "Indicates that the CertificateType is currently not supported for the CertificateUri.",
            "Message": "The CertificateType %1 is not supported for the target URI %2 in CertificateUri.",
            "NumberOfArgs": 2,
            "ParamTypes": [
                "string",
                "string"
            ],
            "Resolution": "Please correct the CertificateType with the corresponding CertificateUri.",
            "Severity": "Critical"
        },
        "DuplicateCertificateStringForOwnerGuid": {
            "Description": "The CertificateString has been used for existing certificate OwnerGuid.",
            "Message": "The POST operation is unsuccessful because the CertificateString has been used for another OwnerGuid.",
            "NumberOfArgs": 0,
            "Resolution": "Please use another CertificateString or deleting the existing OwnerGuid for this CertificateString.",
            "Severity": "Critical"
        },
        "DuplicateOwnerGuid": {
            "Description": "The OwnerGuid is the same as existing certificate OwnerGuid.",
            "Message": "The POST operation is unsuccessful because of duplicate OwnerGuid.",
            "NumberOfArgs": 0,
            "Resolution": "Please use another OwnerGuid.",
            "Severity": "Critical"
        },
        "GenerateCSRFailed": {
            "Description": "Failed to generate CSR.",
            "Message": "The Process of generating CSR is terminated and return error.",
            "NumberOfArgs": 0,
            "Resolution": "Ensure the data content is valid and the format is correct.",
            "Severity": "Critical"
        },
        "InvalidCertificateString": {
            "Description": "Verify CertificateString Failed.",
            "Message": "The CertificateString value or format is invalid.",
            "NumberOfArgs": 0,
            "Resolution": "Ensure the CertificateString has PEM and PEM format is valid, and all end-of-line string of CertificateString in request body should be replaced as \n. If never uploaded private key and did action like Rekey/Reney/GenerateCSR before, add the private key in CertificateString. If the certificate contains any private keys, the private keys should follow PKCS#1 or PKCS#8 format.",
            "Severity": "Critical"
        },
        "InvalidTypeForCertificateString": {
            "Description": "Indicates that the validation of CertificateType for the given CertificateString failed.",
            "Message": "The CertificateType %1 didn't match to the CertificateString in request body.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Please make sure the CertificateType is correct and match to the given CertificateString.",
            "Severity": "Critical"
        },
        "LDAPCertificateUploadFailed": {
            "Description": "Indicates that the LDAP certificates upload is failed.",
            "Message": "The value given for %1 might not have the private key information.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Please make sure to give the value for CertificateId having private key information.",
            "Severity": "Critical"
        },
        "PrepareSigning": {
            "Description": "Indicates that device is preparing to sign certificate.",
            "Message": "Device is preparing to sign certificate for action %1.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "None",
            "Severity": "OK"
        },
        "PrivateKeyCertificateFileNotMatch": {
            "Description": "Indicates that the certificate file and private key file are not matched.",
            "Message": "The certificate file and private key file are not matched.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate file and private key file are correct and resubmit the request.",
            "Severity": "Critical"
        },
        "PrivateKeyFileEncrypted": {
            "Description": "Indicates that the private key file is encrypted.",
            "Message": "The private key file is encrypted. PEM pass phrase encrypted certificates are not supported.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate is correct for SSL server usage and it should not expire or be encrypted.",
            "Severity": "Critical"
        },
        "PrivateKeyFileSizeExceeded": {
            "Description": "Indicates that the size of the private key file exceeded the maximum allowable size.",
            "Message": "The size of private key file has exceeded the maximum allowable size %1 bytes.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Reduce the size of the private key file or increase the size of default allowable size and resubmit the request.",
            "Severity": "Critical"
        },
        "RemoveDefaultBiosCertificateFailed": {
            "Description": "Failed to remove default bios certificate.",
            "Message": "DELETE operation for removing default bios certificate is not allowed.",
            "NumberOfArgs": 0,
            "Resolution": "Default bios certificate cannot be removed.",
            "Severity": "Critical"
        },
        "ReplaceCertificateFailed": {
            "Description": "Failed to replace certificate.",
            "Message": "Target certificate string does not exist.",
            "NumberOfArgs": 0,
            "Resolution": "Make sure the certificate string existed in the given CertificateUri.",
            "Severity": "Critical"
        },
        "SigningCertificateCompletion": {
            "Description": "Signing certificate successfully.",
            "Message": "The Process of signing certificate is completed. The certificate has been installed in %1 URI.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Check the certificate information in URI which certificate has been installed.",
            "Severity": "OK"
        },
        "SigningCertificateFailed": {
            "Description": "Failed to sign certificate.",
            "Message": "The Process of signing CSR is terminated and return error.",
            "NumberOfArgs": 0,
            "Resolution": "Please contact Certificate Authority(CA) to find more details.",
            "Severity": "Critical"
        },
        "SigningServerCertificateCompletion": {
            "Description": "Signing certificate for ssl server successfully.",
            "Message": "The Process of signing certificate for ssl server is completed. The certificate has been installed in %1 URI and HTTPS service is going to restart.",
            "NumberOfArgs": 1,
            "ParamTypes": [
                "string"
            ],
            "Resolution": "Check the certificate information in URI after HTTPS service restarting.",
            "Severity": "OK"
        },
        "VerifyCertificateFileFailed": {
            "Description": "Indicates that the certificate file validate asn1 failed.",
            "Message": "The certificate file validate asn1 failed.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate is correct for SSL server usage and it should not expire or be encrypted.",
            "Severity": "Critical"
        },
        "VerifyServerCertificateFailed": {
            "Description": "Indicates that the validation of SSL certificate for server usage failed.",
            "Message": "The certificate action return error while verifying the certificate data for SSL server.",
            "NumberOfArgs": 0,
            "Resolution": "Please make sure the certificate is correct for SSL server usage and it should not expire or be encrypted.",
            "Severity": "Critical"
        }
    },
    "Name": "CertificateService Message Registry",
    "OwningEntity": "AMI",
    "RegistryPrefix": "CertificateService",
    "RegistryVersion": "1.0.0"
}